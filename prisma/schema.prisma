// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  likes        Like[]    @relation("UserLikes")
  likedBy      Like[]    @relation("LikedByUser")
  matches      Match[]   @relation("UserMatches")
  matchedWith  Match[]   @relation("MatchedWithUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  age         Int?
  gender      String?
  location    String?
  latitude    Float?
  longitude   Float?
  photos      String[] // Array of photo URLs
  interests   String[] // Array of interests
  lookingFor  String?  // What they're looking for
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  receiverId String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  likerId   String
  likedId   String
  createdAt DateTime @default(now())

  liker     User     @relation("UserLikes", fields: [likerId], references: [id], onDelete: Cascade)
  liked     User     @relation("LikedByUser", fields: [likedId], references: [id], onDelete: Cascade)

  @@unique([likerId, likedId])
}

model Match {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1     User     @relation("UserMatches", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("MatchedWithUser", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
} 